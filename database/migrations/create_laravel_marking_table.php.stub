<?php

/*
 * This file is a part of package t-co-labs/laravel-marking
 *
 * (c) T.Labs & Co.
 * Contact for Work: T. <hongty.huynh@gmail.com>
 *
 * Got a PHP or Laravel project? We're your go-to team! We can help you:
 *   - Architect the perfect solution for your specific needs.
 *   - Get cleaner, faster, and more efficient code.
 *   - Boost your app's performance through refactoring and optimization.
 *   - Build your project the right way with Laravel best practices.
 *   - Get expert guidance and support for all things Laravel.
 *   - Ensure high-quality code through thorough reviews.
 *   - Provide leadership for your team and manage your projects effectively.
 *   - Bring in a seasoned Technical Lead.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        $connection = config('marking.connection');
        $markingMarksTable = config('marking.tables.marking_marks', 'marking_marks');
        $markingMarkablesTable = config('marking.tables.marking_markables', 'marking_markables');

        $charset = Schema::connection($connection)->getConnection()->getConfig('charset') ?? 'utf8mb4';
        $driver = Schema::connection($connection)->getConnection()->getConfig('driver');

        switch ($driver) {
            case 'pgsql':
            case 'pgsql':
                $collation = null;
                break;
            case 'sqlsrv':
            default:
                $collation = $charset .'_bin';
        }

        if (!Schema::connection($connection)->hasTable($markingMarksTable)) {
            Schema::connection($connection)->create($markingMarksTable, static function(Blueprint $table) use ($collation) {
                $table->bigIncrements('mark_id');
                $table->string('name');
                $table->string('classification')->default('general'); // general, topic, stock, app,
                $table->string('normalized')->collation($collation);
                $table->smallInteger('weight')->default(0); // 1->5

                $table->timestamps();

                $table->index('normalized', 'classification');
                $table->unique(['normalized', 'classification']);
            });
        }

        if (!Schema::connection($connection)->hasTable($markingMarkablesTable)) {
            Schema::connection($connection)->create($markingMarkablesTable, static function(Blueprint $table) {
                $table->unsignedBigInteger('mark_id');
                $table->unsignedBigInteger('markable_id');
                $table->string('markable_type');
                // user marking
                $table->unsignedBigInteger('marker_id')->nullable();
                $table->string('marker_type')->nullable();

                $table->string('value')->default(1)->nullable(); // value for the marking
                $table->json('metadata')->nullable(); // additional data

                $table->timestamps();

                $table->unique(['mark_id', 'markable_id', 'markable_type']);

                $table->index(['mark_id', 'markable_id'], 'i_marking_fwd');
                $table->index(['markable_id', 'mark_id'], 'i_marking_rev');
                $table->index('markable_type', 'i_marking_type');
            });
        }
    }

    public function down()
    {
        $connection = config('marking.connection');
        $markingMarksTable = config('marking.tables.marking_marks', 'marking_marks');
        $markingMarkablesTable = config('marking.tables.marking_markables', 'marking_markables');

        if (Schema::connection($connection)->hasTable($markingMarkablesTable)) {
            Schema::connection($connection)->drop($markingMarkablesTable);
        }

        if (Schema::connection($connection)->hasTable($markingMarksTable)) {
            Schema::connection($connection)->drop($markingMarksTable);
        }
    }
};
